# =============================================================================
#  这是官方的 conduwuit 示例配置。
#  如果你将其用于你的服务器，需根据自己的需求进行调整。
#  至少，需要更改 server_name 字段！
#
#  你可以在 https://conduwuit.puppyirl.gay/configuration.html 找到此文档。
# =============================================================================

[global]

# server_name 是该服务器的名称，用作用户和房间 ID 的后缀。示例：matrix.org, conduit.rs

# Conduit 服务器需要所有 /_matrix/ 请求通过 https://your.server.name/ 在端口 443（客户端-服务器）和 8448（联邦）可达。

# 如果这对你来说不可行，你可以创建 /.well-known 文件来重定向请求（委派）。参见
# https://spec.matrix.org/latest/client-server-api/#getwell-knownmatrixclient
# 和
# https://spec.matrix.org/v1.9/server-server-api/#getwell-knownmatrixserver
# 了解更多信息

# 你需要编辑此处
#server_name = "your.server.name"

# 此处列出的服务器将用于收集其他服务器的公钥（公证可信密钥服务器）。
#
# conduwuit 的默认行为是尝试先查询可信密钥服务器，再查询个别服务器。
# 出于性能考虑，这是默认行为，但如果你想在查询公证服务器之前先查询个别服务器，请设置为
#
# （目前，conduwuit 不支持批量密钥请求，因此此列表应仅包含 Synapse 服务器）
# 默认为 `matrix.org`
# trusted_servers = ["matrix.org"]

# Sentry.io 崩溃/恐慌报告，性能监控/指标等。默认不启用。
# conduwuit 的默认 Sentry 报告端点是 o4506996327251968.ingest.us.sentry.io
#
# 默认为 *false*
#sentry = false

# 如果需要自定义的 Sentry 报告 URL
#
# 默认为 conduwuit 的默认 Sentry 端点: "https://fe2eb4536aa04949e28eff3128d64757@o4506996327251968.ingest.us.sentry.io/4506996334657536"
#sentry_endpoint = ""

# 在 Sentry.io 崩溃报告和指标中报告你的 Conduwuit server_name
#
# 默认为 false
#sentry_send_server_name = false

# Sentry.io 的性能监控/追踪采样率
#
# 请注意，较高的值可能会影响性能，可以通过将其设置为 0.0 (0%) 禁用
# 该值作为百分比读取，表示为小数
#
# 默认为 15% 的追踪 (0.15)
#sentry_traces_sample_rate = 0.15

# 是否将堆栈追踪附加到 Sentry 报告中
#sentry_attach_stacktrace = false

# 发送 panic 到 sentry。默认情况下为 true，但必须启用 sentry。
#sentry_send_panic = true

# 发送错误到 sentry。默认情况下为 true，但 sentry 必须启用。此选项仅在 release 模式下有效；在 debug 模式下强制为 false。
#sentry_send_error = true

# 控制 Sentry 的跟踪日志级别，发送诸如面包屑和事务之类的信息
# 默认为 "info"
#sentry_filter = "info"

### 数据库配置

# 这是 conduwuit 保存其数据的唯一目录，包括媒体。
# 注意：之前是 "/var/lib/matrix-conduit"
database_path = "/var/lib/conduwuit"

# 数据库后端：仅支持 rocksdb。
database_backend = "rocksdb"

### 网络

# conduwuit 将运行的端口。你需要设置反向代理，如 Caddy 或 Nginx，使所有对端口 443 和 8448 上 /_matrix 的请求
# 转发到在此端口上运行的 conduwuit 实例
# 使用 Docker 的用户：不要更改此项，你需要将外部端口映射到此端口。
# 要监听多个端口，请指定一个向量，例如 [8080, 8448]
#
# 如果未指定，默认值为 8008
port = 6167

# conduwuit 将监听的默认地址（IPv4 或 IPv6）。通常你希望设置为 localhost (127.0.0.1 / ::1)。如果你使用 Docker 或容器 NAT 网络设置，
# 你可能需要将其设置为 0.0.0.0。
# 要监听多个地址，请指定一个向量，例如 ["127.0.0.1", "::1"]
#
# 如果未指定，默认值为 IPv4 和 IPv6 localhost: ["127.0.0.1", "::1"]
address = "127.0.0.1"

# 文件上传的最大请求大小
max_request_size = 20_000_000 # 以字节为单位

# 如果你希望监听 UNIX 套接字，请取消注释 unix_socket_path，并在指定路径下监听。
# 如果监听 UNIX 套接字，你必须移除/注释定义的 'address' 键，并将反向代理添加到 'conduwuit' 组，除非使用 unix_socket_perms 指定了全局 RW 权限（最低 666）。
#unix_socket_path = "/run/conduwuit/conduwuit.sock"
#unix_socket_perms = 660

# 将此项设置为 true 以让 conduwuit 使用 zstd 压缩 HTTP 响应体。
# 如果 conduwuit 没有使用 `zstd_compression` 特性构建，此选项无效。
# 请注意，启用 HTTP 压缩可能会削弱 TLS。
# 大多数用户无需启用此项。
# 在决定启用此选项前，请参阅 https://breachattack.com/ 和 https://wikipedia.org/wiki/BREACH
zstd_compression = false

# 将此项设置为 true 以让 conduwuit 使用 gzip 压缩 HTTP 响应体。
# 如果 conduwuit 没有使用 `gzip_compression` 特性构建，此选项无效。
# 请注意，启用 HTTP 压缩可能会削弱 TLS。
# 大多数用户无需启用此项。
# 在决定启用此选项前，请参阅 https://breachattack.com/ 和 https://wikipedia.org/wiki/BREACH
gzip_compression = false

# 将此项设置为 true 以让 conduwuit 使用 brotli 压缩 HTTP 响应体。
# 如果 conduwuit 没有使用 `brotli_compression` 特性构建，此选项无效。
# 请注意，启用 HTTP 压缩可能会削弱 TLS。
# 大多数用户无需启用此项。
# 在决定启用此选项前，请参阅 https://breachattack.com/ 和 https://wikipedia.org/wiki/BREACH
brotli_compression = false

# 以 CIDR 范围 / 子网的形式列出的 IPv4 和 IPv6 地址向量 *用引号括起来*，你不希望 conduwuit 向这些地址发送出站请求。
# 默认为 RFC1918，不可路由，回环，组播和测试网地址以确保安全。
#
# 要禁用，请将此设置为空向量 (`[]`)。
# 请注意，这*不是*绝对的保证。你应当使用具有区域的防火墙，因为在应用层进行此操作可能有绕过的风险。
#
# 当前，此设置不考虑使用的代理，如 Synapse。
ip_range_denylist = [
    "127.0.0.0/8",
    "10.0.0.0/8",
    "172.16.0.0/12",
    "192.168.0.0/16",
    "100.64.0.0/10",
    "192.0.0.0/24",
    "169.254.0.0/16",
    "192.88.99.0/24",
    "198.18.0.0/15",
    "192.0.2.0/24",
    "198.51.100.0/24",
    "203.0.113.0/24",
    "224.0.0.0/4",
    "::1/128",
    "fe80::/10",
    "fc00::/7",
    "2001:db8::/32",
    "ff00::/8",
    "fec0::/10",
]

### 管理 / 隐私 / 安全

# 控制是否启用旧版的未经身份验证的 Matrix 媒体库端点。
# 这些端点包括：
# - /_matrix/media/*/config
# - /_matrix/media/*/upload
# - /_matrix/media/*/preview_url
# - /_matrix/media/*/download/*
# - /_matrix/media/*/thumbnail/*
#
# 经过身份验证的等效端点始终启用。
#
# 当前默认为 true，但可能在下一个版本中发生更改。
#allow_legacy_media = true

# 设置为 true 以允许用户类型 "guest" 注册。Element 会尝试自动注册访客用户。
# 默认为 false
allow_guest_registration = false

# 设置为 true 以在管理房间中记录访客注册。
# 默认为 false，因为这可能会导致噪音或不必要的日志。
log_guest_registrations = false

# 设置为 true 以允许访客注册/用户自动加入 `auto_join_rooms` 中指定的任何房间
# 默认为 false
allow_guests_auto_join_rooms = false

# 向量列表，列出 conduwuit 将拒绝从中下载远程媒体的服务器。
# 无默认值。
# prevent_media_downloads_from = ["example.com", "example.local"]

# 启用注册。如果设置为 false，用户将无法在此服务器上注册。
# 如果设置为 true 且未配置令牌，用户可以在没有第二步验证的情况下注册，只有当你设置了
# `yes_i_am_very_very_sure_i_want_an_open_registration_server_prone_to_abuse` 为 true 时，才能开放注册。如果你只希望通过令牌注册，
# 请配置 `registration_token` 键。
allow_registration = false
# 请注意，一个开放注册的服务器没有第二步验证，极易受到滥用并有可能被其他服务器（包括 matrix.org）取消联邦。

# 一个静态注册令牌，新的用户在创建帐户时需要提供此令牌。如果未设置且 `allow_registration` 为 true，则注册将完全开放，无需任何条件。
# 你需要编辑此项。
registration_token = "change this token for something specific to your server"

# 控制是否允许联邦。
# 默认为 true
# allow_federation = true

# 控制是否允许用户创建房间。
# 应用服务和管理员始终允许创建房间
# 默认为 true
# allow_room_creation = true

# 控制是否禁止非管理员的本地用户发送房间邀请（本地和远程），以及非管理员用户是否可以接收远程房间邀请。管理员始终可以发送和接收所有房间邀请。
# 默认为 false
# block_non_admin_invites = false

# 禁止的用户名模式/字符串列表。此列表中的值匹配 *包含*。
# 在用户名可用性检查、注册以及启动时会进行检查，如果你的数据库中的任何本地用户有被禁止的用户名，则会发出警告。
# 无默认值。
# forbidden_usernames = []

# 禁止的房间别名和房间 ID 的模式/字符串列表。此列表中的值匹配 *包含*。
# 在创建房间别名、自定义房间 ID 时会进行检查，如果数据库中的任何房间别名/ID 被禁止，则会发出警告。
# 无默认值。
# forbidden_alias_names = []

# 禁止的服务器名称列表，我们将阻止与这些服务器的传入和传出联邦，以及阻止客户端房间加入/远程用户邀请。
#
# 该检查适用于房间 ID、房间别名、发送方服务器名称、发送方用户的服务器名称、传入联邦 X-Matrix 源、以及出站联邦处理程序。
#
# 基本上是“全局” ACL。无默认值。
# forbidden_remote_server_names = []

# 禁止的服务器名称列表，我们将阻止所有针对远程房间目录的传出联邦请求。此功能有助于防止我们的用户进入不良服务器或空间。
# 无默认值。
# forbidden_remote_room_directory_server_names = []

# 将此项设置为 true 以允许你服务器的公共房间目录进行联邦。
# 将此项设置为 false 以防止 /publicRooms 爬虫访问，但这会阻止外部用户查看你服务器的公共房间目录。如果完全禁用了联邦（`allow_federation`），则此项本质上为 false。
allow_public_room_directory_over_federation = false

# 将此项设置为 true 以允许未经客户端身份验证（访问令牌）的用户通过客户端 API 查询你服务器的公共房间目录。将此项设置为 false 以防止 /publicRooms 爬虫访问。
allow_public_room_directory_without_auth = false

# 将此项设置为 true 以锁定你服务器的公共房间目录，仅允许管理员将房间发布到房间目录中。
# 所有用户仍然可以取消发布房间，即使此项启用。
#
# 默认为 false
lockdown_public_room_directory = false

# 将此项设置为 true 以允许联邦设备显示名称/允许外部用户查看你的设备显示名称。
# 如果完全禁用了联邦（`allow_federation`），此项本质上为 false。为了隐私，建议禁用此项。
allow_device_name_federation = false

# 允许 URL 预览请求的域名向量列表。默认无。
# 注意：这是 *包含* 匹配，而不是精确匹配。放置 "google.com" 将匹配 "https://google.com" 和 "http://mymaliciousdomainexamplegoogle.com"。
# 将此设置为 "*" 将允许所有 URL 预览。请注意，这会显著增加服务器的攻击面，你应了解这样做的风险。
url_preview_domain_contains_allowlist = []

# 允许 URL 预览请求的显式域名向量列表。默认无。
# 注意：这是 *显式* 匹配，而不是包含匹配。放置 "google.com" 将匹配 "https://google.com" 和 "http://google.com"，但不会匹配 "https://mymaliciousdomainexamplegoogle.com"。
# 将此设置为 "*" 将允许所有 URL 预览。请注意，这会显著增加服务器的攻击面，你应了解这样做的风险。
url_preview_domain_explicit_allowlist = []

# 允许 URL 预览请求的 URL 向量列表。默认无。
# 注意：这是 *包含* 匹配，而不是显式匹配。放置 "google.com" 将匹配 "https://google.com/"、"https://google.com/url?q=https://mymaliciousdomainexample.com" 和 "https://mymaliciousdomainexample.com/hi/google.com"。
# 将此设置为 "*" 将允许所有 URL 预览。请注意，这会显著增加服务器的攻击面，你应了解这样做的风险。
url_preview_url_contains_allowlist = []

# 禁止 URL 预览请求的显式域名向量列表。默认无。
# 注意：这是 *显式* 匹配，而不是包含匹配。放置 "google.com" 将匹配 "https://google.com" 和 "http://google.com"，但不会匹配 "https://mymaliciousdomainexamplegoogle.com"。
# 禁止列表首先检查，在允许列表之前。将此设置为 "*" 不会做任何事。
url_preview_domain_explicit_denylist = []

# 爬取 URL 预览时允许的最大字节数。默认值为 384KB（384_000 字节）。
url_preview_max_spider_size = 384_000

# 决定是否在根域上运行域名允许列表检查（包含和显式）。不适用于 URL 包含允许列表。默认值为 false。
# 例子：如果启用了此项，并且在允许列表中有 "wikipedia.org"，则所有子域如 "en.m.wikipedia.org" 都将被允许，因为检查并匹配了根域。
# 如果你觉得域名包含允许列表过于宽泛，但仍希望允许根域下的所有子域，此选项很有用。
url_preview_check_root_domain = false

# 配置选项，允许或不允许传入的联邦请求获取我们本地用户的个人资料
# `/ _matrix/federation/v1/query/profile`
#
# 如果 `allow_federation` 被禁用，此项本质上为 false。
#
# 默认值为 true
allow_profile_lookup_federation_requests = true

# 配置选项，自动停用任何尝试加入以下房间的用户的帐户：
# - 被禁的房间
# - 禁止的房间别名
# - 含有禁止的服务器名称的房间别名或 ID
#
# 如果所有禁止列表均包含有毒房间或服务器，此选项可能很有用，并且可自动纠正问题而无需管理员干预。
#
# 这也会让用户退出所有房间。此选项不会处理联邦问题（例如远程房间邀请）。
#
# 默认值为 false，因为房间可能因非管理原因被禁止。
#auto_deactivate_banned_room_attempts = false

### 管理房间和控制台

# 控制是否在启动时立即激活 conduwuit 管理房间控制台/CLI。
# 该选项也可以通过 `--console` 参数启用。
#
# 默认为 false
#admin_console_automatic = false

# 控制启动时将执行哪些管理命令。这是一个字符串的向量列表，包含要运行的管理命令。
#
# 示例：`admin_execute = ["debug ping puppygock.gay", "debug echo hi"]`
#
# 此选项也可以通过 `--execute` 参数配置，并可以接受标准 shell 命令和环境变量。
#
# 示例：`./conduwuit --execute "server admin-notice conduwuit has started up at $(date)"`
#
# 默认无。
#admin_execute = [""]

# 控制当管理执行命令（`--execute` / `admin_execute`）失败时，conduwuit 是否报错并无法启动。
#
# 默认为 false
#admin_execute_errors_ignore = false

# 控制管理命令日志捕获的最大日志级别（运行管理命令时生成的日志）。
#
# 默认为 "info"（发布版本），否则为 "debug"（调试版本）
#admin_log_capture = info

# 允许管理员在 #admins 以外的房间中通过 \!admin 前缀输入命令。回复将公开可见，并来自发送者。
# 默认为 true
#admin_escape_commands = true

### 杂项

# conduwuit 的最大日志级别。允许的值有 debug, info, warn 或 error
# 另见：https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives
# **注意**：
# 对于发布版本，tracing crate 配置为仅实现高于 error 的级别，以避免编译后的二进制文件中不必要的 trace 宏开销。
# 对于调试版本，不应用此限制。
#
# 默认为 "info"
#log = "info"

# 控制是否允许加密的房间和事件（默认 true）
#allow_encryption = false

# 如果启用，conduwuit 将定期向 `https://pupbrain.dev/check-for-updates/stable` 发送简单的 GET 请求，以检查是否有新公告。尽管名称如此，但这不是更新检查端点，
# 它只是公告检查端点。
# 默认为 false。
#allow_check_for_updates = false

# 设置为 false 以禁止用户加入或创建 conduwuit 不完全支持的房间版本。
# conduwuit 正式支持房间版本 6 - 10，实验性/不稳定支持 3 - 5 和 11。
# 默认为 true。
#allow_unstable_room_versions = true

# 控制在用户注册时在其显示名末尾添加任意文本的选项，文本前有一个空格。
# 这曾是闪电 emoji 选项，现在支持添加自定义文本或 emoji。
# 若要禁用此功能，请设置为 ""（空字符串）。
# 默认为 "🏳️‍⚧️"（跨性别骄傲旗）。
#new_user_displayname_suffix = "🏳️‍⚧️"

# 控制 conduwuit 是否会首先查询你信任的公证密钥服务器列表（`trusted_servers`），以获取它不知道的远程服务器的签名密钥，
# 还是先查询个别服务器，然后再回退到信任的密钥服务器。
#
# 前者/默认行为使联合/远程房间的加入速度更快，因为我们查询的是一个我们知道工作正常、速度快且可靠的服务器（或列表），
# 它几乎拥有房间中所有服务器的签名密钥。查询个别服务器可能会因基础设施不同而耗时更久，尤其是有大量宕机服务器的情况下。
#
# 但是，这确实增加了对一个或多个大型实体的依赖，因为 `trusted_servers` 通常应该包含长期且大型的服务器，它们知道大量的家庭服务器。
#
# 如果你不明白这些意味着什么，保持此项和 `trusted_servers` 的默认值。
#
# 默认为 true，因为这是联合的最快选项。
#query_trusted_key_servers_first = true

# 使 conduwuit 让新注册的用户自动加入指定的房间 **ID** 列表/向量。
# 指定的房间 ID 必须是你在服务器上至少加入过一次的房间，并且必须是公共房间。
#
# 无默认值。
#auto_join_rooms = []

# 在启动时立即重试失败和未完成的远程服务器消息传递。这称为爆发。
# 如果禁用此项，除非为该服务器排队了更多消息，否则这些消息可能不会被发送。
# 除非服务器资源极为有限或部署规模巨大，否则不要更改此选项。除非你非常了解该选项，否则请勿禁用。
#startup_netburst = true

# 将启动时的爆发限制为每个远程服务器最近的（默认：50）条排队消息。所有较旧的消息将被丢弃且不再尝试。
# `startup_netburst` 选项必须启用，此值才有效。除非你非常了解该值，否则请勿更改它。将此值设置为 -1 以重试所有消息而不修剪队列；这可能会消耗大量磁盘。将此值设置为 0 以丢弃所有消息，而不尝试重新发送。
#startup_netburst_keep = 50

# 如果启用了 'perf_measurements' 特性，启用使用 tracing_flame 收集折叠的跟踪范围堆栈追踪配置文件。生成的配置文件可以使用 inferno[1]、speedscope[2] 或许多其他工具可视化。
# [1]: https://github.com/jonhoo/inferno
# [2]: www.speedscope.app
# tracing_flame = false

# 如果启用了 'tracing_flame'，设置包含在配置文件中的事件过滤器。
# 支持的语法记录在 https://docs.rs/tracing-subscriber/latest/tracing_subscriber/filter/struct.EnvFilter.html#directives
# tracing_flame_filter = "trace,h2=off"

# 如果启用了 'tracing_flame'，设置生成的配置文件的写入路径。
# tracing_flame_output_path = "./tracing.folded"

# 启用 tokio-console。此选项仅对开发人员相关。
# 详见：docs/development.md#debugging-with-tokio-console 获取更多信息。
#tokio_console = false

# 启用与 Conduit 媒体目录的向后兼容性，方法是创建媒体的符号链接。
# 如果你计划再次使用 Conduit，此选项是必需的。否则，设置为 false 可减少文件系统的混乱和管理目录中这些符号链接的开销。此项现在默认禁用。
# 你仍然可以返回上游的 Conduit，但你必须至少运行一次启用了该选项的 Conduwuit，并允许 media_startup_check 在关闭前进行，以便返回 Conduit。
#
# 默认禁用。
#media_compat_file_link = false

# 在媒体启动检查的一部分中从数据库中清除丢失的媒体。这意味着如果你从媒体目录中删除文件，数据库中的相应条目也会被移除。
# 由于如果媒体目录意外移动或无法访问，数据库中的元数据条目将丢失，因此此项默认禁用。
#
# 默认禁用。
#prune_missing_media = false

# 在启动时检查媒体目录的一致性：
# 1. 如果启用了 `media_compat_file_link`，此检查将用于在 Conduit 和 Conduwuit 之间切换时升级媒体。必须启用这两个选项才能处理此问题。
# 2. 当媒体从目录中删除时，此检查也将删除其数据库条目。
#
# 如果这些检查均不适用于你的用例，并且媒体目录非常大，设置为 false 可能会减少启动时间。
#
# 默认启用。
#media_startup_check = true

# OpenID 令牌的过期时间/TTL，以秒为单位
#
# 这些是主要用于 Matrix 帐户集成的 OpenID 令牌，而非 OIDC/OpenID Connect 等。
#
# 默认为 3600（1 小时）
#openid_token_ttl = 3600

# 紧急密码功能。设置此处的密码将允许你登录到服务器服务帐户（例如 `@conduit`），并允许你运行管理命令，将自己邀请到管理房间等。
#
# 无默认值。
#emergency_password = ""

### 通用数据库选项

# 设置为任意浮点值以调整 conduwuit 的内存 LRU 缓存大小。
# 默认情况下，缓存会根据 CPU 核心数量自动调整。
# 如果你有大量内存可用以提高性能，此选项可能有用。
#
# 之前称为 `conduit_cache_capacity_modifier`
#
# 默认为 1.0。
#cache_capacity_modifier = 1.0

# 设置为任意浮点值（以 MB 为单位），conduwuit 将通知数据库引擎有多少内存可用于数据库相关的缓存。
# 如果你有大量内存可用以提高性能，此选项可能有用。
# 默认为 128.0 + (64.0 * CPU 核心数)。
#db_cache_capacity_mb = 256.0

### RocksDB 选项

# 设置为 true 以使用适合 HDD（较慢存储设备）的 RocksDB 配置选项。
#
# 值得注意的是，默认情况下，conduwuit 将启用 Direct IO 使用 RocksDB。一般来说，这提高了性能，因为它绕过了缓冲 I/O（系统页面缓存）。
# 然而，Direct IO 可能会在数据库操作中引发问题，尤其是在你的设置不常见的情况下。这种情况已经在 FUSE 文件系统上观察到，可能也会出现在 ZFS 文件系统上。
# RocksDB 通常会处理/纠正这些问题，但不能涵盖所有设置。
# 如果你遇到任何 RocksDB 问题，请尝试启用此选项，因为它关闭了 Direct IO。如果此选项解决了你的数据库问题，请随时在 conduwuit Matrix 房间报告。
# 更多信息请参见 https://github.com/facebook/rocksdb/wiki/Direct-IO。
#
# 默认为 false
#rocksdb_optimize_for_spinning_disks = false

# 启用 direct-io 以提高数据库性能。默认情况下启用。若数据库位于不支持 direct-io 的文件系统上，请将此选项设置为 false。
#rocksdb_direct_io = true

# RocksDB 日志级别。这与 conduwuit 的日志级别不同。这是 RocksDB 引擎/库的日志级别，日志将显示在数据库文件夹/路径中的 `LOG` 文件中。默认为 error。conduwuit 通常会将 RocksDB 错误记录为普通日志。
#rocksdb_log_level = "error"

# RocksDB `LOG` 文件的最大大小（以字节为单位），超过此大小会进行日志轮替。默认为 4MB。
#rocksdb_max_log_file_size = 4194304

# RocksDB 在强制日志轮替前的时间（以秒为单位）。默认为 0。
#rocksdb_log_time_to_roll = 0

# RocksDB 用于数据库操作（如清理、同步、刷新、压缩等）的线程数。设置为 0 时，使用所有逻辑线程。
#
# 默认为你的 CPU 逻辑线程数。
#rocksdb_parallelism_threads = 0

# 为压缩线程启用闲置 I/O 优先级。这可以防止服务器操作中的意外延迟，通常是个好主意。默认启用。
#rocksdb_compaction_ioprio_idle = true

# 为压缩线程启用闲置 CPU 优先级。为了防止繁忙系统上的压缩操作过度滞后，默认情况下未启用此选项。
#rocksdb_compaction_prio_idle = false

# RocksDB 将保留的最大 `LOG` 文件数量。此值必须 *不* 为 0，至少为 1。
# 默认为 3，因为这些文件通常不太有用。
#rocksdb_max_log_files = 3

# 要使用的 RocksDB 数据库压缩类型。
# 可选项包括 "zstd"、"zlib"、"bz2"、"lz4" 或 "none"。
# 通常 ZSTD 是速度/性能、存储、I/O 放大和 CPU 使用的最佳平衡。
# 如果你想要更多性能但较少压缩（使用更多存储）和较少 CPU 使用，请使用 LZ4。
# 更多详细信息请参见 https://github.com/facebook/rocksdb/wiki/Compression。
#
# 设置为 "none" 将禁用压缩。
#
# 默认为 "zstd"
#rocksdb_compression_algo = "zstd"

# 指定的压缩算法用于 RocksDB 的压缩级别。
# 默认为 32767，RocksDB 将其解释为默认的魔法数字，并转换为库的默认压缩级别，因为它们各不相同。
# 请参见其 `kDefaultCompressionLevel`。
#
#rocksdb_compression_level = 32767

# 指定的压缩算法用于 RocksDB 最底层数据的压缩级别。
# 默认为 32767，RocksDB 将其解释为默认的魔法数字，并转换为库的默认压缩级别，因为它们各不相同。
# 请参见其 `kDefaultCompressionLevel`。
#
# 由于这是最底层（通常是最旧且使用最少的数据），你可能希望在此使用更高的压缩级别，因为此数据使用频率较低。研究你选择的压缩算法。
#
#rocksdb_bottommost_compression_level = 32767

# 是否启用 RocksDB 的 "bottommost_compression"。
# 以增加更多 CPU 使用为代价，此选项会进一步压缩数据库，以减少更多存储。
# 建议将此选项与 ZSTD 压缩一起使用，以获得最佳压缩效果。
# 更多详细信息请参见 https://github.com/facebook/rocksdb/wiki/Compression。
#
# 默认为 false，因为此选项在压缩时会使用更多的 CPU。
#rocksdb_bottommost_compression = false

# 统计信息收集级别。某些管理命令显示数据库统计信息时，可能需要此选项。较高的设置可能会影响数据库性能。
#
# 选项范围为 0 到 6：
# 0 = 无统计信息。
# 1 = 发布模式下无统计信息（默认）。
# 2 到 3 = 无性能影响的统计信息。
# 3 到 5 = 可能影响性能的统计信息。
# 6 = 所有统计信息。
#
# 默认为 1（无统计信息，调试模式除外）。
#rocksdb_stats_level = 1

# 数据库修复模式（用于 RocksDB SST 损坏）
#
# 当服务器运行时报告损坏或出现 panic 时使用此选项。如果服务器拒绝启动，首先使用恢复模式选项。启动后发生的 SST 损坏错误可能需要此选项。
#
# - 建议在运行修复之前备份数据库目录。
# - 在运行修复后，建议禁用修复模式并重新启动服务器。
#
# 默认为 false
#rocksdb_repair = false

# 数据库恢复模式（用于 RocksDB WAL 损坏）
#
# 当服务器报告损坏并拒绝启动时使用此选项。设置为模式 2（PointInTime）可清理恢复此损坏。服务器将从崩溃前几秒或几分钟的最后良好状态继续。客户端可能需要运行“清除缓存并重新加载”来处理回滚。恢复成功后，你可以将模式重置为默认值并再次重新启动。
# 请注意，在某些情况下，至少需要运行 30 分钟才能清除恢复模式下的损坏错误。
#
# 如果 PointInTime 无法修复或解决问题，你可以尝试模式 3（SkipAnyCorruptedRecord），但这可能会导致服务器处于不一致的状态。
#
# 默认模式 1（TolerateCorruptedTailRecords）会自动丢弃数据库中损坏的最后一条记录，但不会更多。这极不可能导致客户端不同步。要禁用任何形式的静默回滚，请设置为模式 0（AbsoluteConsistency）。
#
# 选项为：
# 0 = AbsoluteConsistency
# 1 = TolerateCorruptedTailRecords（默认）
# 2 = PointInTime（尝试恢复时使用我）
# 3 = SkipAnyCorruptedRecord（你现在已失去 Conduwuit 保修）
#
# 更多信息请参见 https://github.com/facebook/rocksdb/wiki/WAL-Recovery-Modes
#
# 默认为 1（TolerateCorruptedTailRecords）
#rocksdb_recovery_mode = 1

### 域名解析和缓存

# DNS 内存缓存中存储的最大条目数。条目的大小可能会有所不同，因此如果过度增加此值请小心。仅在使用外部 DNS 缓存时减少此值。请注意，systemd *不* 计作外部缓存，即使配置为缓存也是如此。
#dns_cache_entries = 32768

# DNS 缓存中条目的最短生存时间（以秒为单位）。默认值可能对大多数管理员来说显得过高；这是有意为之的。仅在使用外部 DNS 缓存时减少此值。
#dns_min_ttl = 10800

# DNS 缓存中 NXDOMAIN 条目的最短生存时间（以秒为单位）。此值对于服务器高效联合至关重要。NXDOMAIN 假定不会返回联合，并进行积极缓存，而不是不断重新检查。
#
# 默认为 3 天，因为这些 *极少* 是误报。
#dns_min_ttl_nxdomain = 259200

# DNS 查询等待回复的时间（以秒为单位）。请注意，某些域名的递归查询可能需要数秒，因此此值不应过低。
#dns_timeout = 10

# 超时后的重试次数。
#dns_attempts = 10

# DNS 错误时回退到 TCP。将此项设置为 false 如果 nameserver 不支持此功能。
#dns_tcp_fallback = true

# 启用查询所有 nameserver 直到找到域名。在 hickory_resolver 中称为 "trust_negative_responses"。
# 如果第一个 nameserver 响应 NXDOMAIN 或返回空的 NOERROR 响应，则此设置可避免无用的 DNS 查询。
#
# 默认为查询一个 nameserver 后停止（false）。
#query_all_nameservers = true

# 启用仅使用 TCP 查询指定 nameserver，而不是 UDP。
#
# 你很可能 *不* 希望这样做。hickory-resolver 已经在 UDP 错误时回退到 TCP。
# 默认为 false
#query_over_tcp_only = false

# DNS A/AAAA 记录查找策略
#
# 取值为以下选项之一的数字：
# 1 - Ipv4Only（仅查询 A 记录，不查询 AAAA/IPv6）
# 2 - Ipv6Only（仅查询 AAAA 记录，不查询 A/IPv4）
# 3 - Ipv4AndIpv6（并行查询 A 和 AAAA 记录，使用首先返回成功响应的记录）
# 4 - Ipv6thenIpv4（查询 AAAA 记录，如果失败则查询 A 记录）
# 5 - Ipv4thenIpv6（查询 A 记录，如果失败则查询 AAAA 记录）
#
# 如果你没有 IPv6 网络，为了更好的性能可以将此项设置为 Ipv4Only（1），因为即使 AAAA 记录成功返回，你也永远不会使用其中的内容。
#
# 默认为 5 - Ipv4ThenIpv6，因为这是最兼容的方式，目前 IPv4 网络仍然最为普遍。
#ip_lookup_strategy = 5

### 请求超时、连接超时和连接池

## 请求超时是 HTTP 响应的超时时间
## 连接超时是 TCP 连接的超时时间
##
## 连接池超时是保持打开的空闲连接的超时时间。
## 连接池和 keepalive 对于联邦或其他高频率使用连接的场景非常有用，这些场景由于 TCP 和 TLS 1.3 的开销而需要保持连接打开以提高性能。
##
## 通常这些默认值是最佳的，但如果你发现需要更改它们，它们可以在这里进行设置。

# 默认/基础连接超时时间。
# 仅用于 URL 预览和更新/新闻端点检查
#
# 默认为 10 秒
#request_conn_timeout = 10

# 默认/基础请求超时时间。等待接收来自其他服务器的更多数据的时间。
# 仅用于 URL 预览、更新/新闻以及其他端点检查
#
# 默认为 35 秒
#request_timeout = 35

# 默认/基础请求的总超时时间。整个请求的时间限制。此设置非常高，以避免在处理健康请求时被取消，同时作为后备机制。
# 仅用于 URL 预览和更新/新闻端点检查
#
# 默认为 320 秒
#request_total_timeout = 320

# 默认/基础空闲连接池超时时间
# 仅用于 URL 预览和更新/新闻端点检查
#
# 默认为 5 秒
#request_idle_timeout = 5

# 每个主机的默认/基础最大空闲连接数
# 仅用于 URL 预览和更新/新闻端点检查
#
# 默认为 1，因为通常可以重用同一个打开的连接
#request_idle_per_host = 1

# 联邦 well-known 解析连接超时时间
#
# 默认为 6 秒
#well_known_conn_timeout = 6

# 联邦 HTTP well-known 解析请求超时时间
#
# 默认为 10 秒
#well_known_timeout = 10

# 联邦客户端请求超时时间
# 你肯定希望此值较高，以应对非常大的房间加入、慢速服务器和你自己的资源等情况。
#
# 默认为 300 秒
#federation_timeout = 300

# 联邦客户端空闲连接池超时时间
#
# 默认为 25 秒
#federation_idle_timeout = 25

# 联邦客户端每个主机的最大空闲连接数
#
# 默认为 1，因为通常可以重用同一个打开的连接
#federation_idle_per_host = 1

# 联邦发送器请求超时时间
# 远程服务器处理发送事务可能需要一段时间。
#
# 默认为 180 秒
#sender_timeout = 180

# 联邦发送器空闲连接池超时时间
#
# 默认为 180 秒
#sender_idle_timeout = 180

# 联邦发送器事务重试回退限制
#
# 默认为 86400 秒
#sender_retry_backoff_limit = 86400

# 应用服务 URL 请求连接超时时间
#
# 默认为 35 秒，因为通常应用服务托管在同一网络内
#appservice_timeout = 35

# 应用服务 URL 空闲连接池超时时间
#
# 默认为 300 秒
#appservice_idle_timeout = 300

# 通知网关推送器空闲连接池超时时间
#
# 默认为 15 秒
#pusher_idle_timeout = 15

### 存在状态 / 正在输入指示器 / 已读回执

# 控制本地（仅你服务器）存在状态更新/请求的配置选项。默认为 true。
# 请注意，conduwuit 的存在状态更新速度非常快，不像 Synapse 那样缓慢。
# 如果使用传出的存在状态，必须启用此项。
#
#allow_local_presence = true

# 控制传入的联邦存在状态更新/请求的配置选项。默认为 true。
# 此选项接收来自其他服务器的存在状态更新，但除非 `allow_outgoing_presence` 为 true，否则不会发送任何更新。
# 请注意，conduwuit 的存在状态更新速度非常快，不像 Synapse 那样缓慢。
#
#allow_incoming_presence = true

# 控制传出的存在状态更新/请求的配置选项。默认为 true。
# 此选项将存在状态更新发送给其他服务器，但除非 `allow_incoming_presence` 为 true，否则不会接收任何更新。
# 请注意，conduwuit 的存在状态更新速度非常快，不像 Synapse 那样缓慢。
# 如果使用传出的存在状态，必须同时启用 `allow_local_presence`。
#
#allow_outgoing_presence = true

# 启用远程用户的存在状态空闲计时器的配置选项。禁用此项可作为一种优化措施，适用于参与多个大房间的服务器或资源有限的情况。禁用后可能导致某些远程用户的存在状态不正确（例如，保持在线状态）。默认为 true。
#presence_timeout_remote_users = true

# 控制在存在状态更新为“空闲”前的秒数。默认为 5 分钟。
#presence_idle_timeout_s = 300

# 控制在存在状态更新为“离线”前的秒数。默认为 30 分钟。
#presence_offline_timeout_s = 1800

# 控制是否接收远程传入的已读回执的配置选项。
# 默认为 true。
#allow_incoming_read_receipts = true

# 控制是否发送已读回执给远程服务器的配置选项。
# 默认为 true。
#allow_outgoing_read_receipts = true

# 控制是否发送传出的正在输入状态更新给联邦。默认为 true。
#allow_outgoing_typing = true

# 控制是否接收来自联邦的传入正在输入状态更新。默认为 true。
#allow_incoming_typing = true

# 控制联邦用户显示正在输入状态的最大时间（秒）。
#typing_federation_timeout_s = 30

# 控制本地客户端显示正在输入状态的最短时间（秒）。此设置不会覆盖客户端停止输入的请求。它只在没有停止请求的情况下强制执行最小值。
#typing_client_timeout_min_s = 15

# 控制本地客户端显示正在输入状态的最长时间（秒）。
#typing_client_timeout_max_s = 45

### TURN / VoIP

# 使用的 TURN URI/服务器的向量列表
#
# 无默认值
#turn_uris = ["turn:example.turn.uri?transport=udp", "turn:example.turn.uri?transport=tcp"]

# 用于生成用户名和密码的 HMAC-SHA1 哈希的 TURN secret
#
# 这更为安全，但如果需要，你可以使用传统的用户名/密码。
#
# 无默认值
#turn_secret = ""

# 提供给客户端的 TURN 用户名
#
# 无默认值
#turn_username = ""

# 提供给客户端的 TURN 密码
#
# 无默认值
#turn_password = ""

# TURN 的 TTL（生存时间）
#
# 默认值为 86400 秒
#turn_ttl = 86400

# 允许访客/未经身份验证的用户访问 TURN 凭据
#
# 这等同于 Synapse 的 `turn_allow_guests` 配置选项。允许任何未经身份验证的用户调用 `/_matrix/client/v3/voip/turnServer`。
#
# 默认为 false
#turn_allow_guests = false


# 其他未在 [global] 中的选项：
#
#
# 启用直接 TLS 支持运行 conduwuit
# 强烈建议你使用反向代理。这主要与需要私有 CA 设置的测试套件（如 complement）相关。
# [global.tls]
# certs = "/path/to/my/certificate.crt"
# key = "/path/to/my/private_key.key"
#
# 是否监听并允许 HTTP 和 HTTPS 连接（不安全！）
# 仅当 conduwuit 使用 `axum_dual_protocol` 特性构建时，此配置选项可用（默认特性中不包含）。
# 默认为 false
#dual_protocol = false


# 如果你使用通过 well-known 文件进行的委派，并且无法从你的反向代理提供它们，你可以取消注释这些选项，直接从 conduwuit 提供它们。这需要将所有请求代理到 conduwuit，而不仅仅是 `/_matrix`。
#
#[global.well_known]
#server = "matrix.example.com:443"
#client = "https://matrix.example.com"
#
# 单一的联系人和/或支持页面用于 /.well-known/matrix/support
# 所有选项都是字符串。目前仅支持一个联系人。
# 无默认值。
#
#support_page = ""
#support_role = ""
#support_email = ""
#support_mxid = ""
